Pelajari Kode NextJS Ini:

// src/lib/mongodb.js
import mongoose from "mongoose";

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  throw new Error("Harap setel MONGODB_URI di .env.local");
}

let isConnected = false;

const connectionToDatabase = async () => {
  if (isConnected) {
    console.log("Menggunakan koneksi MongoDB yang sudah ada.");
    return;
  }

  try {
    const db = await mongoose.connect(MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });

    isConnected = db.connections[0].readyState === 1;
    console.log("MongoDB Connected");
  } catch (error) {
    console.error("MongoDB Connection Error:", error);
    process.exit(1);
  }
};

export default connectionToDatabase;

// src/middleware/auth.js
import jwt from "jsonwebtoken";

const authMiddleware = (handler) => async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];

  if (!token) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    return handler(req, res);
  } catch (error) {
    return res.status(401).json({ message: "Invalid token" });
  }
};

export default authMiddleware;

// src/models/Chat.js
import mongoose from "mongoose";

const ChatSchema = new mongoose.Schema(
  {
    userId: { type: String, required: true },
    title: { type: String, required: true },
    messages: [
      {
        role: { type: String, required: true },
        content: { type: String, required: true },
      },
    ],
  },
  { timestamps: true },
);

const Chat = mongoose.models.Chat || mongoose.model("Chat", ChatSchema);

export default Chat;

// src/models/User.js
import mongoose from "mongoose";

const UserSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
      trim: true,
    },
    username: {
      type: String,
      required: true,
      unique: true,
      trim: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
      lowercase: true,
      trim: true,
    },
    password: {
      type: String,
      required: true,
    },
  },
  { timestamps: true },
);

const User = mongoose.model("User", UserSchema);
export default User;

// src/pages/api/auth/login.js
import connectionToDatabase from "@/lib/mongodb";
import User from "@/models/User";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method Not Allowed" });
  }

  await connectionToDatabase();

  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({ message: "Email dan password harus diisi." });
  }

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(401).json({ message: "User tidak ditemukan." });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: "Password salah." });
    }

    const token = jwt.sign(
      { userId: user._id, username: user.username },
      process.env.JWT_SECRET,
      { expiresIn: "7d" },
    );

    return res.status(200).json({ message: "Login berhasil", token });
  } catch (error) {
    return res.status(500).json({ message: "Terjadi kesalahan pada server." });
  }
}

// src/pages/api/auth/register.js
import connectionToDatabase from "@/lib/mongodb";
import User from "@/models/User";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method Not Allowed" });
  }

  await connectionToDatabase();

  const { name, username, email, password } = req.body;

  if (!name || !username || !email || !password) {
    return res.status(400).json({ message: "Semua field harus diisi." });
  }

  try {
    const existingUser = await User.findOne({ $or: [{ email }, { username }] });
    if (existingUser) {
      return res
        .status(400)
        .json({ message: "Email atau username sudah digunakan." });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = await User.create({
      name,
      username,
      email,
      password: hashedPassword,
    });

    const token = jwt.sign(
      { userId: newUser._id, username: newUser.username },
      process.env.JWT_SECRET,
      {
        expiresIn: "7d",
      },
    );

    return res.status(201).json({
      message: "Registrasi berhasil",
      user: {
        name: newUser.name,
        username: newUser.username,
        email: newUser.email,
        password: newUser.password,
      },
      token,
    });
  } catch (error) {
    return res.status(500).json({ message: "Terjadi kesalahan pada server." });
  }
}

// src/pages/api/history/[id].js
import connectionToDatabase from "@/lib/mongodb";
import Chat from "@/models/Chat";
import jwt from "jsonwebtoken";

export default async function handler(req, res) {
  await connectionToDatabase();

  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  try {
    const token = authHeader.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const userId = decoded.userId;
    const { id } = req.query;

    if (req.method === "GET") {
      const chat = await Chat.findOne({ _id: id, userId });

      if (!chat) {
        return res.status(404).json({ message: "Chat tidak ditemukan" });
      }

      return res.status(200).json(chat);
    }

    if (req.method === "POST") {
      const { message } = req.body;

      if (
        !message ||
        typeof message !== "object" ||
        !message.content ||
        !message.role
      ) {
        return res
          .status(400)
          .json({ message: "Message diperlukan dengan role dan content" });
      }

      const chat = await Chat.findOne({ _id: id, userId });
      if (!chat) {
        return res.status(404).json({ message: "Chat tidak ditemukan" });
      }

      chat.messages.push({ role: message.role, content: message.content });
      chat.updatedAt = new Date();
      await chat.save();

      return res
        .status(201)
        .json({ message: "Pesan berhasil ditambahkan", chat });
    }

    if (req.method === "PUT") {
      const { message } = req.body;

      if (
        !message ||
        typeof message !== "object" ||
        !message.content ||
        !message.role
      ) {
        return res
          .status(400)
          .json({ message: "Message diperlukan dengan role dan content" });
      }

      const chat = await Chat.findOne({ _id: id, userId });
      if (!chat) {
        return res.status(404).json({ message: "Chat tidak ditemukan" });
      }

      chat.messages.push({ role: message.role, content: message.content });
      chat.updatedAt = new Date();
      await chat.save();

      return res.status(200).json(chat);
    }

    if (req.method === "DELETE") {
      const chat = await Chat.findOneAndDelete({ _id: id, userId });

      if (!chat) {
        return res.status(404).json({ message: "Chat tidak ditemukan" });
      }

      return res.status(200).json({ message: "Chat berhasil dihapus" });
    }

    return res.status(405).json({ message: "Method Not Allowed" });
  } catch (error) {
    return res.status(401).json({ message: "Invalid Token" });
  }
}

// src/pages/api/history/index.js
import connectionToDatabase from "@/lib/mongodb";
import Chat from "@/models/Chat";
import jwt from "jsonwebtoken";

export default async function handler(req, res) {
  await connectionToDatabase();

  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  try {
    const token = authHeader.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const userId = decoded.userId;
    const { id } = req.query; // Ambil ID jika tersedia

    if (req.method === "GET") {
      if (id) {
        // GET by ID
        const chat = await Chat.findOne({ _id: id, userId });
        if (!chat)
          return res.status(404).json({ message: "Chat tidak ditemukan" });
        return res.status(200).json(chat);
      } else {
        // GET all
        const chats = await Chat.find({ userId }).sort({ updatedAt: -1 });
        return res.status(200).json(chats);
      }
    }

    if (req.method === "POST") {
      const { title } = req.body;
      if (!title) return res.status(400).json({ message: "Title diperlukan" });

      const newChat = await Chat.create({
        userId,
        title,
        messages: [],
      });

      return res.status(201).json(newChat);
    }

    if (req.method === "PUT") {
      if (!id) return res.status(400).json({ message: "ID diperlukan" });

      const { title } = req.body;
      const chat = await Chat.findOneAndUpdate(
        { _id: id, userId },
        { title, updatedAt: new Date() },
        { new: true },
      );

      if (!chat)
        return res.status(404).json({ message: "Chat tidak ditemukan" });

      return res.status(200).json(chat);
    }

    if (req.method === "DELETE") {
      if (!id) return res.status(400).json({ message: "ID diperlukan" });

      const chat = await Chat.findOneAndDelete({ _id: id, userId });

      if (!chat)
        return res.status(404).json({ message: "Chat tidak ditemukan" });

      return res.status(200).json({ message: "Chat berhasil dihapus" });
    }

    return res.status(405).json({ message: "Method Not Allowed" });
  } catch (error) {
    return res.status(401).json({ message: "Invalid Token" });
  }
}

// src/pages/api/profile/index.js
import jwt from "jsonwebtoken";
import connectionToDatabase from "@/lib/mongodb";
import User from "@/models/User";

export default async function handler(req, res) {
  if (req.method !== "GET") {
    return res.status(405).json({ message: "Method Not Allowed" });
  }

  await connectionToDatabase();

  try {
    const token = req.headers.authorization?.split(" ")[1];

    if (!token) {
      return res.status(401).json({ message: "Token tidak ditemukan" });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId).select("-password");

    if (!user) {
      return res.status(404).json({ message: "User tidak ditemukan" });
    }

    return res.status(200).json(user);
  } catch (error) {
    return res
      .status(500)
      .json({ message: "Terjadi kesalahan server", error: error.message });
  }
}

.env.local
MONGODB_URI=mongodb+srv://yogaone:WlzKwPCWmqU5oGIr@cluster0.jhkyh.mongodb.net/takonai?retryWrites=true&w=majority&appName=Cluster0
NEXT_PUBLIC_GROQ=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
JWT_SECRET=4f8cdd5b2a9fef2a5b0d1a6c9f3e7a1d2b5c8e4f0a6d3b9f7c0e1a2d8b4c6e3

Buatkan saya step by step Migration ke database Sqlite (prisma) dan ExpressJS (JavaScript), full code lengkap dengan struktur folder
